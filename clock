#!/usr/bin/env python
import sys
import datetime
from clock_framework import options
from clock_framework.datetimeutils import DateTimeUtils
from clock_framework.options import ClockOptions
from clock_framework.logger import ClockLogger
from clock_framework.taskcollection import TaskCollection
from clock_framework.report import CategoriesReport, TotalTimeReport

def add_log(opt):
    logger = ClockLogger()
    logger.read_file(opt.file.value)
    if opt.edit_current.is_active:
        logger.edit_current(' '.join(opt.arguments))
    elif opt.command == options.Commands.stop:
        logger.add(opt.at.value, '[Stop]')
    else:
        logger.add(opt.at.value, ' '.join(opt.arguments))

    logger.write_file(opt.file.value)

def show_report(options):
    collection = TaskCollection.from_file(options.file.value)
    filters = TaskCollection.get_filters(options)
    for f in filters:
        collection = collection.filter(f)

    report = CategoriesReport(collection, len(options.arguments))
    report.print_report()

    target_time = options.get_target_time()
    time_report = TotalTimeReport(collection, target_time)
    time_report.print_report()

# Script starts
opt = ClockOptions()
opt.parse(sys.argv)

if opt.help.is_active:
    opt.show_help()
    exit()

if opt.command in [options.Commands.add, options.Commands.stop]:
    add_log(opt)
else:
    show_report(opt)