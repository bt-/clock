#!/usr/bin/env python
from clock_framework import logger
from clock_framework import report
from clock_framework import options

def show_current(arg):
    # Show current issue
    reader = logger.ClockReader()
    reader.read_file(arg.options.file)
    collection = reader.parse()
    report.CurrentIssueReport(collection).print_report()

def add_log(arg):
    log = logger.ClockLogger()
    log.read_file(arg.options.file)
    if arg.options.current:
        log.edit_current(' '.join(arg.arguments))
    elif arg.options.command == 'stop':
        log.add(arg.options.at, '[Stop]')
    else:
        log.add(arg.options.at, ' '.join(arg.arguments))

    log.write_file(arg.options.file)
    show_current(arg)


# Start script
arg = options.ClockArguments()
arg.parse()

if arg.options.command in ('add', 'stop'):
    add_log(arg)
    exit()

reader = logger.ClockReader()
reader.read_file(arg.options.file)
collection = reader.parse()
for f in arg.get_filters():
    collection = f.apply_to(collection)

if arg.options.details:
    #all = report.DetailsReport(collection)
    all = report.ChronologicalReport(collection)
    all.print_report()
    exit()

if arg.options.current:
    show_current(arg)
    exit()

if arg.options.categories:
    cat = report.CategoriesReport(collection, len(arg.arguments))
    cat.print_report()

time_report = report.TotalTimeReport(collection, arg.get_target_time())
time_report.print_report()
